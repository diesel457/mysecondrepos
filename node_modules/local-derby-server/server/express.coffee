_ = require 'lodash'
url = require 'url'
path = require 'path'
conf = require 'nconf'
chalk = require 'chalk'

express = require 'express'
expressSession = require 'express-session'
serveStatic = require 'serve-static'
favicon = require 'serve-favicon'
compression = require 'compression'
cookieParser = require 'cookie-parser'
bodyParser = require 'body-parser'
methodOverride = require 'method-override'
healthcheck = require 'dm-healthcheck'

derbyLogin = require 'derby-login'
derbyRouter = require 'local-derby-router/server'
upload = require 'jquery-file-upload-middleware'


# Misc middleware:
miscMiddleware = (store) ->
  (req, res, next) ->
    model = req.getModel()
    model.set '_session.isAdmin', true if req.session.userId in store.ADMINS
    if req.cookies.redirect and (not req.cookies.redirectWhen or
        req.cookies.redirectWhen is 'loggedIn') and req.session.loggedIn
      redirectUrl = req.cookies.redirect
      res.clearCookie('redirectWhen')
      res.clearCookie('redirect')
      return res.redirect redirectUrl
    if req.session.loggedIn
      auth = model.at 'auths.' + req.session.userId
      currentTime = +new Date
      auth.fetch ->
        auth.set 'timestamps.lastactivity', currentTime
        next()
    else
      next()

# Files upload
uploadMiddleware = (uploadDir) ->
  upload.configure
    uploadDir: uploadDir
    uploadUrl: '/upload'
    imageVersions:
      thumbnail:
        width: 80
        height: 80
  upload.fileHandler()

# WebRTC config
global.env.ICE_SERVERS = [
  url: 'turn:idg@webrtc.decisionmapper.com', credential: 'evbymHed9'
]
#global.env.PEERJS_HOST = url.parse(conf.get('BASE_URL')).hostname
#unless global.env.PEERJS_HOST
#  throw new Error 'No BASE_URL defined in config! ' +
#    'Required for PeerJS to get hostname!'

# Public config to pipe into browser
publicEnvEval = """
  (function(){
    window.env = window.env || {{unescaped #root._session.env }};
  })();
"""

module.exports = (store, apps, error, options, cb) ->

  MongoStore = require('connect-mongo')(expressSession)
  mongoUrl = conf.get('MONGO_URL')

  sessionStore = new MongoStore url: mongoUrl
  sessionStore.on 'connected', ->

    session = expressSession
      secret: conf.get('SESSION_SECRET')
      store: sessionStore
      cookie:
        maxAge: 1000 * 60 * 60 * 24 * 365 * 2
      saveUninitialized: true
      resave: true

    hwHandlers = require('racer-highway') store, { session } # if options.websockets

    expressApp = express()

    # ----------------------------------------------------->    logs    <#
    options.ee.emit 'logs', expressApp


    # Prevent crashes only in production for now
    if conf.get('DOMAIN_MIDDLEWARE')
      expressApp.use require('express-domain-middleware')

    expressApp
      .use compression()
      .use healthcheck()
      .use serveStatic options.publicPath
      .use '/build/client', express.static(options.dirname + '/build/client')
      .use store.modelMiddleware()
      .use cookieParser()
      .use bodyParser.json()
      .use bodyParser.urlencoded extended: true
      .use methodOverride()
      .use session

    # ----------------------------------------------------->    afterSession    <#
    options.ee.emit 'afterSession', expressApp

    expressApp
      .use do (envJson = JSON.stringify(global.env)) ->
        (req, res, next) ->
          model = req.getModel()
          model.set '_session.env', envJson, next

  #  if options.websockets
    expressApp.use hwHandlers.middleware
  #  else
  #    expressApp.use require('racer-browserchannel') store

    expressApp
      .use '/upload', uploadMiddleware path.join options.publicPath, 'upload'
      .use derbyLogin.middleware store, options.login
      .use miscMiddleware store

    # ----------------------------------------------------->    middleware    <#
    options.ee.emit 'middleware', expressApp

    # Pipe stuff from server code to client code
    apps.forEach (app) ->

      headView = app.views.find 'Head'
      # --------------------------------------------------->       head       <#
      options.ee.emit 'head', headView

      bodyElementView = app.views.find 'BodyElement'
      # --------------------------------------------------->       body       <#
      options.ee.emit 'body', bodyElementView

      tailView = app.views.find 'Tail'
      tailView.source += "<script> #{ publicEnvEval } </script>"
      # --------------------------------------------------->       tail       <#
      options.ee.emit 'tail', tailView

    # apps' [derby] routes
    apps.forEach (app) ->
      expressApp.use app.router()

    # apps' [express] routes
    apps.forEach (app) ->
      derbyRouter expressApp, app, ns: app.name

    # server routes
    # ----------------------------------------------------->      routes      <#
    options.ee.emit 'routes', expressApp

    expressApp
      .all '*', (req, res, next) -> next '404: ' + req.url
      #.use error

    cb
      expressApp: expressApp
      upgrade: hwHandlers.upgrade # if options.websockets
