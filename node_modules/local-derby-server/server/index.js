// Generated by CoffeeScript 1.10.0
(function() {
  var _, async, chalk, conf, fs, http, https, start,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  start = Date.now();

  _ = require('lodash');

  fs = require('fs');

  http = require('http');

  https = require('https');

  conf = require('nconf');

  chalk = require('chalk');

  async = require('async');

  module.exports = function(options) {
    var apps, error, onlyApps, store;
    apps = [];
    onlyApps = conf.get('APPS') || conf.get('apps');
    onlyApps = onlyApps && onlyApps.split(',');
    if (options.app) {
      apps.push(options.app);
    } else if (options.apps) {
      apps = options.apps;
    } else if (options.appPath) {
      options.appPath.forEach(function(appPath) {
        var ref;
        if (!onlyApps || (ref = path.basename(appPath), indexOf.call(onlyApps, ref) >= 0)) {
          return apps.push(require(appPath));
        }
      });
    } else if (options.appsPath) {
      options.appsPath.forEach(function(appsPath) {
        var filename, fullpath, i, len, ref, results;
        ref = fs.readdirSync(appsPath);
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          filename = ref[i];
          if (/^_/.test(filename)) {
            continue;
          }
          if (filename === 'error' || filename === 'components') {
            continue;
          }
          if (onlyApps && !(indexOf.call(onlyApps, filename) >= 0)) {
            continue;
          }
          fullpath = appsPath + '/' + filename;
          if (fs.statSync(fullpath).isDirectory()) {
            results.push(apps.push(require(fullpath)));
          } else {
            results.push(void 0);
          }
        }
        return results;
      });
    } else {
      process.exit('No derby apps specified!');
    }
    console.log('Derby apps: ' + apps.length);
    store = require('./store')(options);
    error = null;
    return require('./express')(store, apps, error, options, function(arg) {
      var expressApp, listenServer, server, startServer, upgrade;
      expressApp = arg.expressApp, upgrade = arg.upgrade;
      if (options.https) {
        server = https.createServer(options.https, expressApp);
      } else {
        server = http.createServer(expressApp);
      }
      if (options.websockets) {
        server.on('upgrade', upgrade);
      }
      listenServer = function() {
        return server.listen(conf.get('PORT'), function(err) {
          var time;
          time = (Date.now() - start) / 1000;
          console.log('%d listening. Go to: http://localhost:%d/ in %d sec', process.pid, conf.get('PORT'), time);
          return options.ee.emit('done');
        });
      };
      startServer = function() {
        if (options.beforeStart != null) {
          return options.beforeStart(store, listenServer);
        } else {
          return listenServer();
        }
      };
      return startServer();
    });
  };

}).call(this);
