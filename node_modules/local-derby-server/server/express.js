// Generated by CoffeeScript 1.10.0
(function() {
  var _, bodyParser, chalk, compression, conf, cookieParser, derbyLogin, derbyRouter, express, expressSession, favicon, healthcheck, methodOverride, miscMiddleware, path, publicEnvEval, serveStatic, upload, uploadMiddleware, url,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require('lodash');

  url = require('url');

  path = require('path');

  conf = require('nconf');

  chalk = require('chalk');

  express = require('express');

  expressSession = require('express-session');

  serveStatic = require('serve-static');

  favicon = require('serve-favicon');

  compression = require('compression');

  cookieParser = require('cookie-parser');

  bodyParser = require('body-parser');

  methodOverride = require('method-override');

  healthcheck = require('dm-healthcheck');

  derbyLogin = require('derby-login');

  derbyRouter = require('local-derby-router/server');

  upload = require('jquery-file-upload-middleware');

  miscMiddleware = function(store) {
    return function(req, res, next) {
      var auth, currentTime, model, redirectUrl, ref;
      model = req.getModel();
      if (ref = req.session.userId, indexOf.call(store.ADMINS, ref) >= 0) {
        model.set('_session.isAdmin', true);
      }
      if (req.cookies.redirect && (!req.cookies.redirectWhen || req.cookies.redirectWhen === 'loggedIn') && req.session.loggedIn) {
        redirectUrl = req.cookies.redirect;
        res.clearCookie('redirectWhen');
        res.clearCookie('redirect');
        return res.redirect(redirectUrl);
      }
      if (req.session.loggedIn) {
        auth = model.at('auths.' + req.session.userId);
        currentTime = +(new Date);
        return auth.fetch(function() {
          auth.set('timestamps.lastactivity', currentTime);
          return next();
        });
      } else {
        return next();
      }
    };
  };

  uploadMiddleware = function(uploadDir) {
    upload.configure({
      uploadDir: uploadDir,
      uploadUrl: '/upload',
      imageVersions: {
        thumbnail: {
          width: 80,
          height: 80
        }
      }
    });
    return upload.fileHandler();
  };

  global.env.ICE_SERVERS = [
    {
      url: 'turn:idg@webrtc.decisionmapper.com',
      credential: 'evbymHed9'
    }
  ];

  publicEnvEval = "(function(){\n  window.env = window.env || {{unescaped #root._session.env }};\n})();";

  module.exports = function(store, apps, error, options, cb) {
    var MongoStore, mongoUrl, sessionStore;
    MongoStore = require('connect-mongo')(expressSession);
    mongoUrl = conf.get('MONGO_URL');
    sessionStore = new MongoStore({
      url: mongoUrl
    });
    return sessionStore.on('connected', function() {
      var expressApp, hwHandlers, session;
      session = expressSession({
        secret: conf.get('SESSION_SECRET'),
        store: sessionStore,
        cookie: {
          maxAge: 1000 * 60 * 60 * 24 * 365 * 2
        },
        saveUninitialized: true,
        resave: true
      });
      hwHandlers = require('racer-highway')(store, {
        session: session
      });
      expressApp = express();
      options.ee.emit('logs', expressApp);
      if (conf.get('DOMAIN_MIDDLEWARE')) {
        expressApp.use(require('express-domain-middleware'));
      }
      expressApp.use(compression()).use(healthcheck()).use(serveStatic(options.publicPath)).use('/build/client', express["static"](options.dirname + '/build/client')).use(store.modelMiddleware()).use(cookieParser()).use(bodyParser.json()).use(bodyParser.urlencoded({
        extended: true
      })).use(methodOverride()).use(session);
      options.ee.emit('afterSession', expressApp);
      expressApp.use((function(envJson) {
        return function(req, res, next) {
          var model;
          model = req.getModel();
          return model.set('_session.env', envJson, next);
        };
      })(JSON.stringify(global.env)));
      expressApp.use(hwHandlers.middleware);
      expressApp.use('/upload', uploadMiddleware(path.join(options.publicPath, 'upload'))).use(derbyLogin.middleware(store, options.login)).use(miscMiddleware(store));
      options.ee.emit('middleware', expressApp);
      apps.forEach(function(app) {
        var bodyElementView, headView, tailView;
        headView = app.views.find('Head');
        options.ee.emit('head', headView);
        bodyElementView = app.views.find('BodyElement');
        options.ee.emit('body', bodyElementView);
        tailView = app.views.find('Tail');
        tailView.source += "<script> " + publicEnvEval + " </script>";
        return options.ee.emit('tail', tailView);
      });
      apps.forEach(function(app) {
        return expressApp.use(app.router());
      });
      apps.forEach(function(app) {
        return derbyRouter(expressApp, app, {
          ns: app.name
        });
      });
      options.ee.emit('routes', expressApp);
      expressApp.all('*', function(req, res, next) {
        return next('404: ' + req.url);
      });
      return cb({
        expressApp: expressApp,
        upgrade: hwHandlers.upgrade
      });
    });
  };

}).call(this);
