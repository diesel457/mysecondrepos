start = Date.now()

_ = require 'lodash'
fs = require 'fs'
http = require 'http'
https = require 'https'
conf = require 'nconf'
chalk = require 'chalk'
async = require 'async'

module.exports = (options) ->

  # Gather derby apps
  apps = []

  onlyApps = conf.get('APPS') || conf.get('apps')
  onlyApps = onlyApps && onlyApps.split(',')
  if options.app
    apps.push options.app
  else if options.apps
    apps = options.apps
  else if options.appPath
    options.appPath.forEach (appPath) ->
      if not onlyApps or path.basename(appPath) in onlyApps
        apps.push require(appPath)
  else if options.appsPath
    options.appsPath.forEach (appsPath) ->
      for filename in fs.readdirSync(appsPath)
        continue if /^_/.test(filename)
        continue if filename in ['error', 'components']
        continue if onlyApps and not (filename in onlyApps)
        fullpath = appsPath + '/' + filename
        apps.push require(fullpath) if fs.statSync(fullpath).isDirectory()
  else
    process.exit 'No derby apps specified!'
  console.log 'Derby apps: ' + apps.length

  # Init store and all apps
  store = require('./store') options

  error = null #options.error options
  require('./express') store, apps, error, options, ({ expressApp, upgrade }) ->

    # Create server and setup websockets connection
    if options.https
      server = https.createServer options.https, expressApp
    else
      server = http.createServer expressApp

    server.on 'upgrade', upgrade if options.websockets

    listenServer = ->
      server.listen conf.get('PORT'), (err) ->
        time = (Date.now() - start) / 1000
        console.log '%d listening. Go to: http://localhost:%d/ in %d sec',
            process.pid, conf.get('PORT'), time
        # ----------------------------------------------->       done       <#
        options.ee.emit 'done'

    startServer = ->
      if options.beforeStart?
        options.beforeStart store, listenServer
      else
        listenServer()

    startServer()
