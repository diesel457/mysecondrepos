_ = require 'lodash'
conf = require 'nconf'
liveDbMongo = require 'livedb-mongo'
livedb = require 'livedb'
coffeeify = require 'coffeeify'
yamlify = require 'yamlify'
derby = require 'derby'
shareAccess = require 'share-access'


module.exports = (options) ->

  derby.use shareAccess, { dontUseOldDocs: true } if options.accessControl?
  derby.use require('racer-schema'), options.schema if options.schema?

  # ------------------------------------------------------->     storeUse     <#
  options.ee.emit 'storeUse', derby

  # LiveDB Setup
  mongoUrl = conf.get('MONGO_URL')
  if /auto_reconnect/.test mongoUrl
    if /\?/.test mongoUrl
      mongoUrl += '&'
    else
      mongoUrl += '?'
    mongoUrl += 'auto_reconnect'

  mongo = liveDbMongo mongoUrl,
    safe: true
    allowAllQueries: true

  store = if conf.get('REDIS_URL') and
      conf.get('BUNDLE_MODE') isnt 'save'

    redis = require 'redis-url'
    redisClient = redis.connect()
    redisObserver = redis.connect()

    redisClient.on 'connect', ->
      redisClient.flushdb (err, didSucceed) ->
        if err
          console.log('Redis flushdb err:', err)
        else
          console.log('Redis flushdb success:', didSucceed)

    redisDriver = livedb.redisDriver mongo, redisClient, redisObserver

    backend = livedb.client driver: redisDriver, db: mongo

    derby.createStore
      backend: backend

  else
    derby.createStore
      db: mongo

  options.accessControl? shareAccess, store

  require('derby-hook') store if options.hooks?
  options.hooks? store

  # ------------------------------------------------------->      store       <#
  options.ee.emit 'store', store

  # Setup Browserify
  store.on 'bundle', (browserify) ->

    # ----------------------------------------------------->      bundle      <#
    options.ee.emit 'bundle', browserify

    # Transforms
    browserify.transform {global: true}, coffeeify
    browserify.transform yamlify

    pack = browserify.pack
    browserify.pack = (opts) ->
      detectTransform = opts.globalTransform.shift()
      opts.globalTransform.push detectTransform
      pack.apply this, arguments

  # Populate admin id's
  store.ADMINS = []
  do (store = store) ->
    model = store.createModel()
    adminIds = model.at 'service.adminIds'
    superadmins = model.query 'auths', { 'email': $in: conf.get('ADMINS') }
    model.fetch adminIds, superadmins, ->
      theAdminIds = adminIds.get() || []
      for superadmin in superadmins.get()
        adminIds.push superadmin.id unless superadmin.id in theAdminIds
      store.ADMINS = adminIds.get() || []
      console.log 'Admins: ' + store.ADMINS.length

  store
