dotty = require 'dotty'
controllers = {}

_initRoute = (app, method, route, Controller, action) ->
  app[method] route, (page, model, params, next) ->
    (new Controller page, model, next)[action] params
  true

_initTransitionalRoute = (app, method, from, to, Controller, action) ->
  app[method] from: from, to: to,
    forward: (model, params, next) ->
      theController = new Controller null, model, next
      theController[action].forward.call theController, params
    back: (model, params, next) ->
      theController = new Controller null, model, next
      theController[action].back.call theController, params

initRoutes = (app, routes) ->
  paths = {}
  leaves = dotty.deepKeys routes, leavesOnly: true
  from = null
  for leaf in leaves

    last = leaf[leaf.length - 1]
    switch

      # Controller
      when last is '_controller'
        dotty.put controllers, leaf[...-1], dotty.get(routes, leaf)

      # Transitional routes
      when last is 'from'
        from = dotty.get(routes, leaf)
      when last is 'to'
        [controller..., action, method, foo] = leaf
        to = dotty.get(routes, leaf)
        _initTransitionalRoute app, method, from, to,
            dotty.get(controllers, controller), action
        dotty.put paths, controller.concat([action]), to
        # TODO: Think if it makes sense to write both 'from' and 'to' paths
        # dotty.put paths, controller.concat([action]), { from: from, to: to }

      # Regular routes
      when last in ['get', 'post', 'put', 'delete']
        options = dotty.get(routes, leaf[...-1])
        [controller..., action, method] = leaf
        route = dotty.get(routes, leaf)

        unless options.serverOnly
          _initRoute app, method, route,
              dotty.get(controllers, controller), action

        dotty.put paths, controller.concat([action]), route

      else false

  paths


module.exports = initRoutes