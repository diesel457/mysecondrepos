// Generated by CoffeeScript 1.7.1
(function() {
  var RouteController, asyncSeriesCall,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  asyncSeriesCall = function(firstFn, secondFn) {
    return firstFn(secondFn);
  };

  module.exports = RouteController = (function() {
    RouteController.createFilter = function(checkFn) {
      return function() {
        var filterArgs;
        filterArgs = arguments;
        return function(method) {
          return function() {
            var methodArgs, optional, pureFilterArgs, _ref;
            methodArgs = arguments;
            optional = (_ref = filterArgs[filterArgs.length - 1]) != null ? _ref.optional : void 0;
            if (optional) {
              pureFilterArgs = Array.prototype.slice.call(filterArgs, 0, -1);
            } else {
              pureFilterArgs = filterArgs;
            }
            return checkFn.call.apply(checkFn, [this].concat(__slice.call(pureFilterArgs), [(function(_this) {
              return function(err) {
                if (err == null) {
                  return method.apply(_this, methodArgs);
                } else if (optional) {
                  return _this.next();
                } else {
                  return _this.next('403: Access denied by filter - ' + err);
                }
              };
            })(this)]));
          };
        };
      };
    };

    RouteController.useFilters = function(filters) {
      var key, value;
      for (key in filters) {
        value = filters[key];
        this[key] = this.createFilter(value);
      }
      return this;
    };

    RouteController.useModules = function(modules) {
      var key, module;
      if (this._modules == null) {
        this._modules = {};
      }
      for (key in modules) {
        module = modules[key];
        this._modules[key] = module;
      }
      return this;
    };

    function RouteController(page, model, next) {
      this.page = page;
      this.model = model;
      this.next = next;
      this._loadedModules = [];
      this._subscriptions = [];
      this._moduleArgs = {};
      this._setupFinished = {};
    }

    RouteController.prototype.loadModule = function(module) {
      if (this.constructor._modules[module] == null) {
        throw "No module with name \'" + module + "\'";
      }
      if (__indexOf.call(this._loadedModules, module) >= 0) {
        throw "Attempt to load module \'" + module + "\' twice";
      }
      this._moduleArgs[module] = Array.prototype.slice.call(arguments, 1);
      this.constructor._modules[module].load.apply(this, this._moduleArgs[module]);
      return this._loadedModules.push(module);
    };

    RouteController.prototype.load = function() {
      return this.loadModule.apply(this, arguments);
    };

    RouteController.prototype.subscribeModules = function() {
      var cb, optionalSubscriptions, subscriptions, _i;
      optionalSubscriptions = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), cb = arguments[_i++];
      subscriptions = this.getSubscriptions.apply(this, optionalSubscriptions);
      return asyncSeriesCall((function(_this) {
        return function(cb) {
          if (subscriptions.length) {
            return _this.model.subscribe(subscriptions, function(err) {
              if (err) {
                return _this.next(err);
              }
              return cb();
            });
          } else {
            return cb();
          }
        };
      })(this), (function(_this) {
        return function() {
          var err, module, _j, _len, _ref;
          _ref = _this._loadedModules;
          for (_j = 0, _len = _ref.length; _j < _len; _j++) {
            module = _ref[_j];
            if (!(!_this._setupFinished[module])) {
              continue;
            }
            try {
              _this.constructor._modules[module].setup.apply(_this, _this._moduleArgs[module]);
            } catch (_error) {
              err = _error;
              return _this.next(err.message || err);
            }
            _this._setupFinished[module] = true;
          }
          if (cb != null) {
            return cb.call(_this);
          }
        };
      })(this));
    };

    RouteController.prototype.setupModules = function() {
      return this.subscribeModules.apply(this, arguments);
    };

    RouteController.prototype.getSubscriptions = function() {
      var optionalSubscriptions, tempSubscriptions;
      optionalSubscriptions = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      tempSubscriptions = this._subscriptions;
      this._subscriptions = [];
      return tempSubscriptions.concat(optionalSubscriptions);
    };

    return RouteController;

  })();

}).call(this);
