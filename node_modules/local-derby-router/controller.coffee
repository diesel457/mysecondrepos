asyncSeriesCall = (firstFn, secondFn) ->
  firstFn secondFn

module.exports = class RouteController

  @createFilter: (checkFn) ->
    ->
      filterArgs = arguments
      (method) ->
        ->
          methodArgs = arguments
          optional = filterArgs[filterArgs.length - 1]?.optional
          if optional
            pureFilterArgs = Array.prototype.slice.call filterArgs, 0, -1
          else
            pureFilterArgs = filterArgs
          checkFn.call @, pureFilterArgs..., (err) =>
            if not err?
              method.apply @, methodArgs
            else if optional
              @next()
            else
              @next '403: Access denied by filter - ' + err

  @useFilters: (filters) ->
    for key, value of filters
      @[key] = @createFilter value
    this

  @useModules: (modules) ->
    @_modules ?= {}
    for key, module of modules
      @_modules[key] = module
    this

  constructor: (@page, @model, @next) ->
    @_loadedModules = []
    @_subscriptions = []
    @_moduleArgs = {}
    @_setupFinished = {}

  # TODO: Transform into factory method
  loadModule: (module) ->
    unless @constructor._modules[module]?
      throw "No module with name \'#{module}\'"
    if module in @_loadedModules
      throw "Attempt to load module \'#{module}\' twice"
    @_moduleArgs[module] = Array::slice.call(arguments, 1)
    @constructor._modules[module].load.apply this, @_moduleArgs[module]
    @_loadedModules.push module

  load: ->
    @loadModule.apply this, arguments

  subscribeModules: (optionalSubscriptions..., cb) ->
    subscriptions = @getSubscriptions.apply this, optionalSubscriptions
    asyncSeriesCall (cb) =>
      if subscriptions.length
        @model.subscribe subscriptions, (err) =>
          return @next err if err
          cb()
      else
        cb()
    , =>
      for module in @_loadedModules when not @_setupFinished[module]
        try
          @constructor._modules[module].setup.apply this, @_moduleArgs[module]
        catch err
          return @next (err.message || err)
        @_setupFinished[module] = true
      cb.call @ if cb?

  setupModules: ->
    @subscribeModules.apply this, arguments

  getSubscriptions: (optionalSubscriptions...) ->
    tempSubscriptions = @_subscriptions
    @_subscriptions = []
    tempSubscriptions.concat optionalSubscriptions
