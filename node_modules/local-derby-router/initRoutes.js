// Generated by CoffeeScript 1.7.1
(function() {
  var controllers, dotty, initRoutes, _initRoute, _initTransitionalRoute,
    __slice = [].slice;

  dotty = require('dotty');

  controllers = {};

  _initRoute = function(app, method, route, Controller, action) {
    app[method](route, function(page, model, params, next) {
      return (new Controller(page, model, next))[action](params);
    });
    return true;
  };

  _initTransitionalRoute = function(app, method, from, to, Controller, action) {
    return app[method]({
      from: from,
      to: to
    }, {
      forward: function(model, params, next) {
        var theController;
        theController = new Controller(null, model, next);
        return theController[action].forward.call(theController, params);
      },
      back: function(model, params, next) {
        var theController;
        theController = new Controller(null, model, next);
        return theController[action].back.call(theController, params);
      }
    });
  };

  initRoutes = function(app, routes) {
    var action, controller, foo, from, last, leaf, leaves, method, options, paths, route, to, _i, _j, _k, _len;
    paths = {};
    leaves = dotty.deepKeys(routes, {
      leavesOnly: true
    });
    from = null;
    for (_i = 0, _len = leaves.length; _i < _len; _i++) {
      leaf = leaves[_i];
      last = leaf[leaf.length - 1];
      switch (false) {
        case last !== '_controller':
          dotty.put(controllers, leaf.slice(0, -1), dotty.get(routes, leaf));
          break;
        case last !== 'from':
          from = dotty.get(routes, leaf);
          break;
        case last !== 'to':
          controller = 4 <= leaf.length ? __slice.call(leaf, 0, _j = leaf.length - 3) : (_j = 0, []), action = leaf[_j++], method = leaf[_j++], foo = leaf[_j++];
          to = dotty.get(routes, leaf);
          _initTransitionalRoute(app, method, from, to, dotty.get(controllers, controller), action);
          dotty.put(paths, controller.concat([action]), to);
          break;
        case last !== 'get' && last !== 'post' && last !== 'put' && last !== 'delete':
          options = dotty.get(routes, leaf.slice(0, -1));
          controller = 3 <= leaf.length ? __slice.call(leaf, 0, _k = leaf.length - 2) : (_k = 0, []), action = leaf[_k++], method = leaf[_k++];
          route = dotty.get(routes, leaf);
          if (!options.serverOnly) {
            _initRoute(app, method, route, dotty.get(controllers, controller), action);
          }
          dotty.put(paths, controller.concat([action]), route);
          break;
        default:
          false;
      }
    }
    return paths;
  };

  module.exports = initRoutes;

}).call(this);
