dotty = require 'dotty'
controllers = {}
_ = require 'lodash'
{ pathFor } = require './helpers'

_initRoute = (expressApp, method, route, Controller, action) ->
  expressApp[method] route, ->
    (new Controller)[action] arguments...
  true

initRoutes = (expressApp, routes) ->
  paths = {}
  leaves = dotty.deepKeys routes, leavesOnly: true
  for leaf in leaves

    last = leaf[leaf.length - 1]
    switch

      # Server controller
      when last is '_serverController'
        filename = dotty.get(routes, leaf)
        dotty.put controllers, leaf[...-1], require( filename )

      when last is 'to'
        [controller..., action, method, foo] = leaf
        to = dotty.get(routes, leaf)
        dotty.put paths, controller.concat([action]), to

      when last in ['get', 'post', 'put', 'delete']
        options = dotty.get(routes, leaf[...-1])
        [controller..., action, method] = leaf
        route = dotty.get(routes, leaf)

        if options.serverOnly
          _initRoute expressApp, method, route,
              dotty.get(controllers, controller), action

        dotty.put paths, controller.concat([action]), route

      else false

  paths

module.exports = (expressApp, app, options = {}) ->

  expressApp._routes ?= {}

  # _routes is a pointer to an object so the following pathFor call works
  # properly even if we merge into _routes more data later
  expressApp.pathFor ?= -> pathFor.call this, expressApp._routes, arguments...

  return unless app.__routesRaw?

  if options.ns
    routes = {}
    routes[options.ns] = app.__routesRaw
  else
    routes = app.__routesRaw

  _.merge expressApp._routes, initRoutes expressApp, routes
