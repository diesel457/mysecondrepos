// Generated by CoffeeScript 1.7.1
(function() {
  var controllers, dotty, initRoutes, pathFor, _, _initRoute,
    __slice = [].slice;

  dotty = require('dotty');

  controllers = {};

  _ = require('lodash');

  pathFor = require('./helpers').pathFor;

  _initRoute = function(expressApp, method, route, Controller, action) {
    expressApp[method](route, function() {
      var _ref;
      return (_ref = new Controller)[action].apply(_ref, arguments);
    });
    return true;
  };

  initRoutes = function(expressApp, routes) {
    var action, controller, filename, foo, last, leaf, leaves, method, options, paths, route, to, _i, _j, _k, _len;
    paths = {};
    leaves = dotty.deepKeys(routes, {
      leavesOnly: true
    });
    for (_i = 0, _len = leaves.length; _i < _len; _i++) {
      leaf = leaves[_i];
      last = leaf[leaf.length - 1];
      switch (false) {
        case last !== '_serverController':
          filename = dotty.get(routes, leaf);
          dotty.put(controllers, leaf.slice(0, -1), require(filename));
          break;
        case last !== 'to':
          controller = 4 <= leaf.length ? __slice.call(leaf, 0, _j = leaf.length - 3) : (_j = 0, []), action = leaf[_j++], method = leaf[_j++], foo = leaf[_j++];
          to = dotty.get(routes, leaf);
          dotty.put(paths, controller.concat([action]), to);
          break;
        case last !== 'get' && last !== 'post' && last !== 'put' && last !== 'delete':
          options = dotty.get(routes, leaf.slice(0, -1));
          controller = 3 <= leaf.length ? __slice.call(leaf, 0, _k = leaf.length - 2) : (_k = 0, []), action = leaf[_k++], method = leaf[_k++];
          route = dotty.get(routes, leaf);
          if (options.serverOnly) {
            _initRoute(expressApp, method, route, dotty.get(controllers, controller), action);
          }
          dotty.put(paths, controller.concat([action]), route);
          break;
        default:
          false;
      }
    }
    return paths;
  };

  module.exports = function(expressApp, app, options) {
    var routes;
    if (options == null) {
      options = {};
    }
    if (expressApp._routes == null) {
      expressApp._routes = {};
    }
    if (expressApp.pathFor == null) {
      expressApp.pathFor = function() {
        return pathFor.call.apply(pathFor, [this, expressApp._routes].concat(__slice.call(arguments)));
      };
    }
    if (app.__routesRaw == null) {
      return;
    }
    if (options.ns) {
      routes = {};
      routes[options.ns] = app.__routesRaw;
    } else {
      routes = app.__routesRaw;
    }
    return _.merge(expressApp._routes, initRoutes(expressApp, routes));
  };

}).call(this);
