// Generated by CoffeeScript 1.8.0
(function() {
  var FormInput, derbyTemplates, expressions, templates, _;

  _ = require('lodash');

  derbyTemplates = require('derby-templates');

  templates = derbyTemplates.templates;

  expressions = derbyTemplates.expressions;

  module.exports = FormInput = (function() {
    function FormInput() {}

    FormInput.prototype.init = function() {
      if (this._hasAttribute('meta')) {
        this._setMetaRefs();
      }
      if (this._hasAttribute('object')) {
        this._refValueIntoObject(this.getAttribute('_name'));
      }
      this._setDefault();
      return this.model.start('_layout', 'layout', this._getLayout.bind(this));
    };

    FormInput.prototype.create = function() {
      if (this._hasAttribute('object')) {
        return this.model.on('change', '_name', (function(_this) {
          return function(name) {
            if (name instanceof templates.ParentWrapper) {
              name = name.get(_this.context.forAttribute('_name'));
            }
            return _this._refValueIntoObject(name);
          };
        })(this));
      }
    };

    FormInput.prototype._modelAttribute = (function() {
      var modelAttributes;
      modelAttributes = {
        id: '_name',
        layout: 'layout'
      };
      return function(key) {
        var _ref;
        return modelAttributes[key] || (typeof this._getModelAttributes === "function" ? (_ref = this._getModelAttributes()) != null ? _ref[key] : void 0 : void 0);
      };
    })();

    FormInput.prototype._getGeneralFields = (function() {
      var fields;
      fields = ['label', 'layout', 'description', 'default', 'placeholder', 'input', 'appearence', 'class', 'readonly'];
      return function() {
        return fields;
      };
    })();

    FormInput.prototype._setMetaRefs = function() {
      var field, fields, modelAttr, _i, _len;
      fields = this._getGeneralFields().concat((typeof this._getExtraFields === "function" ? this._getExtraFields() : void 0) || []);
      for (_i = 0, _len = fields.length; _i < _len; _i++) {
        field = fields[_i];
        if (modelAttr = this._modelAttribute(field)) {
          if (!this._hasAttribute(modelAttr)) {
            this.model.ref(modelAttr, this.model.at('meta.' + field));
          }
        } else {
          if (!this._hasAttribute(field)) {
            this._refMetaAttribute(field);
          }
        }
      }
      return true;
    };

    FormInput.prototype._hasAttribute = function(key) {
      return this.context.forAttribute(key) != null;
    };

    FormInput.prototype.refAttribute = function(key, attributePath) {
      var attribute, attributeContext, expression, parentWrapper, segments;
      segments = attributePath.split('.');
      attribute = segments.shift();
      attributeContext = this.context.forAttribute(attribute);
      if (!attributeContext) {
        return;
      }
      expression = new expressions.AttributePathExpression(attribute, segments, new expressions.ExpressionMeta('@' + attributePath));
      parentWrapper = new templates.ParentWrapper(new templates.DynamicText(expression), expression);
      return this.setAttribute(key, parentWrapper);
    };

    FormInput.prototype._refMetaAttribute = function(key, metaKey) {
      if (metaKey == null) {
        metaKey = key;
      }
      return this.refAttribute(key, 'meta.' + metaKey);
    };

    FormInput.prototype._refObjectKeys = function(key, attributePath) {
      var attribute, attributeContext, expression, parentWrapper, segments;
      segments = attributePath.split('.');
      attribute = segments.shift();
      attributeContext = this.context.forAttribute(attribute);
      if (!attributeContext) {
        return;
      }
      expression = new expressions.FnExpression(['Object', 'keys'], [new expressions.OperatorExpression('||', [new expressions.AttributePathExpression(attribute, segments), new expressions.LiteralExpression({})])], void 0, new expressions.ExpressionMeta("Object.keys( @" + attributePath + " || {} )"));
      parentWrapper = new templates.ParentWrapper(new templates.DynamicText(expression), expression);
      return this.setAttribute(key, parentWrapper);
    };

    FormInput.prototype._setDefault = function() {
      var _default, _ref;
      _default = ((_ref = this.getAttribute('meta')) != null ? _ref["default"] : void 0) || this.getAttribute('default');
      if (_default != null) {
        return this.model.setNull('value', _.cloneDeep(_default));
      }
    };

    FormInput.prototype._refValueIntoObject = function(name) {
      if (name === this.model.get('_currentName')) {
        return;
      }
      this.model.ref('value', this.model.at('object.' + this._sanitizeName(name)));
      return this.model.set('_currentName', name);
    };

    FormInput.prototype._sanitizeName = function(name) {
      if (!name) {
        return name;
      }
      if (name[0] === '$') {
        return name.substr(1);
      } else {
        return name;
      }
    };

    FormInput.prototype._getLayout = function(layout) {
      var hasLabel;
      if (layout) {
        return layout;
      }
      hasLabel = ['meta', 'label', 'description'].some(this._hasAttribute.bind(this));
      if (hasLabel) {
        return 'columns';
      } else {
        return 'pure';
      }
    };

    return FormInput;

  })();

}).call(this);
