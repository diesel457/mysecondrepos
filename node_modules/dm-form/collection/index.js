// Generated by CoffeeScript 1.8.0
(function() {
  var FormCollection, utils, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require('lodash');

  utils = require('../utils');

  module.exports = FormCollection = (function(_super) {
    __extends(FormCollection, _super);

    function FormCollection() {
      return FormCollection.__super__.constructor.apply(this, arguments);
    }

    FormCollection.prototype.view = __dirname;

    FormCollection.prototype.name = 'dm-form:collection';

    FormCollection.prototype.init = function() {
      var patternKey;
      FormCollection.__super__.init.apply(this, arguments);
      patternKey = Object.keys(this.meta.get('patternProperties'))[0];
      this.model.ref('items', this.meta.at('patternProperties.' + patternKey));
      if (this._hasAttribute('order')) {
        this.model.setNull('order', []);
      }
      if (this.model.get('order') != null) {
        return this.model.refList('values', 'value', this.model.at('order'));
      } else {
        return this.model.at('value').filter(null).ref(this.model.at('values'));
      }
    };

    FormCollection.prototype.create = function() {
      return this.model.on('change', 'value.*.id', (function(_this) {
        return function(id, newKey) {
          var index, order, prevValue;
          prevValue = _this.model.del("value." + id);
          if (!prevValue) {
            return;
          }
          _this.model.setDiff("value." + newKey, prevValue);
          order = _this.model.get('order') != null;
          if (!order) {
            return;
          }
          index = order.indexOf(prevValue);
          if (index === -1) {
            return;
          }
          return _this.model.setDiff("order." + index, newKey);
        };
      })(this));
    };

    FormCollection.prototype.add = function() {
      var newField;
      newField = (this.model.del('newField') || '').trim();
      if (!newField) {
        return;
      }
      newField = utils.camelCase(newField);
      this.model.push('values', {
        id: newField
      });
      return this.emit('add', newField);
    };

    FormCollection.prototype.remove = function(item) {
      if (!item) {
        return;
      }
      return this.model.at('value').del(item.get('id'));
    };

    FormCollection.prototype.toggle = function(itemId) {
      this.model.silent().set('edit', itemId);
      return this.model.set('rerender', !this.model.get('rerender'));
    };

    return FormCollection;

  })(require('../input'));

}).call(this);
