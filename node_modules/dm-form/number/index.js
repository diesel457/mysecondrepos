// Generated by CoffeeScript 1.8.0
(function() {
  var FormNumber,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports = FormNumber = (function(_super) {
    __extends(FormNumber, _super);

    function FormNumber() {
      return FormNumber.__super__.constructor.apply(this, arguments);
    }

    FormNumber.prototype.view = __dirname;

    FormNumber.prototype.style = __dirname;

    FormNumber.prototype.name = 'dm-form:number';

    FormNumber.prototype._getExtraFields = function() {
      return ['min', 'max', 'step', 'lazy'];
    };

    FormNumber.prototype.init = function() {
      FormNumber.__super__.init.apply(this, arguments);
      if (!this.getAttribute('lazy')) {
        return this.model.ref('_value', 'value');
      }
    };

    FormNumber.prototype.limit = function() {
      var from, to, value;
      from = this.getAttribute('min');
      to = this.getAttribute('max');
      value = this.model.get('_value');
      if (value === '' || value === '-') {
        value = void 0;
      }
      value = parseFloat(value);
      if (isNaN(value)) {
        value = void 0;
      }
      if (value != null) {
        if ((to != null) && value > to) {
          value = to;
        } else if ((from != null) && value < from) {
          value = from;
        }
      }
      this.model.setDiff('_value', value);
      if (this.getAttribute('lazy')) {
        return this.model.setDiff('value', value);
      }
    };

    return FormNumber;

  })(require('../input'));

}).call(this);
