// Generated by CoffeeScript 1.9.3
(function() {
  var ExtractTextPlugin, WebpackDevServer, _, autoprefixer, csswring, gulp, path, webpack;

  gulp = require('gulp');

  webpack = require('webpack');

  path = require('path');

  _ = require('lodash');

  WebpackDevServer = require('webpack-dev-server');

  autoprefixer = require('autoprefixer-core');

  csswring = require('csswring');

  _ = require('lodash');

  ExtractTextPlugin = require('extract-text-webpack-plugin');

  module.exports = function(options) {
    var base, config;
    base = require('./base')(options);
    config = base.config({
      target: 'web',
      entry: (function() {
        var appName, apps, baseEntry, entry, i, len, ref, res;
        res = {};
        baseEntry = [__dirname + '/../node_modules/racer-highway/lib/browser', options.dirname + '/node_modules/derby-parsing'].concat(options.frontend.baseEntry || []);
        apps = {};
        if (_.isArray(options.apps)) {
          ref = options.apps;
          for (i = 0, len = ref.length; i < len; i++) {
            appName = ref[i];
            apps[appName] = options.dirname + '/' + appName;
          }
        } else {
          apps = options.apps;
        }
        for (appName in apps) {
          entry = apps[appName];
          if (!_.isArray(entry)) {
            entry = [entry];
          }
          res[appName] = baseEntry.concat(entry);
        }
        return res;
      })(),
      module: {
        loaders: [
          {
            include: /racer-highway\/lib\/browser\.js$/,
            loaders: [__dirname + '/../loaders/racer-highway-loader.js']
          }
        ]
      },
      postcss: function() {
        return [
          autoprefixer({
            browsers: ['last 2 version', '> 1%', 'ie 10', 'android 4']
          })
        ];
      },
      output: {
        path: options.dirname + '/build/client',
        pathInfo: true,
        publicPath: "http://localhost:" + options.webpackPort + "/build/client/",
        filename: '[name].js'
      },
      plugins: [],
      stylus: options.stylus || {}
    });
    gulp.task('frontend-build', function(done) {
      config.postcss = function() {
        return [
          autoprefixer({
            browsers: ['last 2 version', '> 1%', 'ie 10', 'android 4']
          }), csswring()
        ];
      };
      config.module.loaders = [
        {
          test: /\.css$/,
          loader: ExtractTextPlugin.extract('style-loader', "css?" + (options.moduleMode ? 'module&' : '') + "-minimize&localIdentName=[component]-[local]!postcss")
        }, {
          test: /\.styl$/,
          loader: ExtractTextPlugin.extract('style-loader', "css?" + (options.moduleMode ? 'module&' : '') + "-minimize&localIdentName=[component]-[local]!postcss!stylus?include css")
        }
      ].concat(config.module.loaders);
      config.plugins = [
        new ExtractTextPlugin('[name].css'), new webpack.optimize.UglifyJsPlugin({
          compress: {
            warnings: false
          }
        })
      ].concat(config.plugins || []);
      return webpack(config).run(base.onBuild(done));
    });
    return gulp.task('frontend-watch', function() {
      var entry, name, ref;
      config.module.loaders = [
        {
          test: /\.css$/,
          loader: "style!css?" + (options.moduleMode ? 'module&' : '') + "localIdentName=[component]-[local]!postcss"
        }, {
          test: /\.styl$/,
          loader: "style!css?" + (options.moduleMode ? 'module&' : '') + "localIdentName=[component]-[local]!postcss!stylus?include css"
        }
      ].concat(config.module.loaders);
      ref = config.entry;
      for (name in ref) {
        entry = ref[name];
        config.entry[name] = [__dirname + '/../node_modules/webpack-dev-server/client?http://localhost:' + options.webpackPort, __dirname + '/../node_modules/webpack/hot/dev-server'].concat(entry || []);
      }
      config.plugins = [
        new webpack.HotModuleReplacementPlugin({
          quiet: true
        })
      ].concat(config.plugins || []);
      return new WebpackDevServer(webpack(config), {
        publicPath: '/build/client/',
        hot: true,
        inline: true,
        stats: {
          colors: true
        },
        noInfo: true
      }).listen(options.webpackPort, 'localhost', function(err, result) {
        if (err) {
          return console.log(err);
        } else {
          return console.log("webpack dev server listening at localhost:" + options.webpackPort);
        }
      });
    });
  };

}).call(this);
